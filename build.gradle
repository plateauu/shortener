buildscript {
    ext {
        springBootVersion = '2.0.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'tech.plateauu'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

ext {
    spockFrameworkVersion = '1.1-groovy-2.4'
    groovyVersion = '2.4.12'
    guavaVersion = '23.4-jre'
    hibernateVersion = "5.2.4.Final"
    vavrVersion = '0.9.0'
    cglibVersion = '3.2.5'
    springfoxVersion = '2.7.0'
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
//	compile('org.springframework.cloud:spring-cloud-starter-hystrix')
//	compile('org.springframework.cloud:spring-cloud-starter-hystrix-dashboard')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
//	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
//	compile('org.springframework.boot:spring-boot-starter-security')
	compile('com.vaadin:vaadin-spring-boot-starter:3.0.0')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("org.hibernate:hibernate-core")
    compile("com.google.guava:guava:${guavaVersion}")
    compile("cglib:cglib:${cglibVersion}")
    compile("io.vavr:vavr:${vavrVersion}")
    compile("mysql:mysql-connector-java:6.0.6")
    compile("io.springfox:springfox-swagger2:${springfoxVersion}")
    compile("io.springfox:springfox-swagger-ui:${springfoxVersion}")

    runtime('com.h2database:h2')
    compileOnly('org.projectlombok:lombok')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("org.spockframework:spock-core:${spockFrameworkVersion}")
    testCompile("org.spockframework:spock-spring:${spockFrameworkVersion}")

//	testCompile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
//	testCompile('org.springframework.security:spring-security-test')
}

compileJava.dependsOn(processResources)

compileJava {
    doLast {
        file("${projectDir}/src/main/groovy").deleteDir()
    }
}

project.buildDir = 'build'

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        groovy {
            srcDir 'src/test/groovy'
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
}
